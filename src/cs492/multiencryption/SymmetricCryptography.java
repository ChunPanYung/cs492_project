package cs492.multiencryption;

import org.apache.commons.io.FileUtils;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

public class SymmetricCryptography extends BaseCryptography {


	// file for storing salt
	private static final String SALTFILE = "salt.txt";


	// Try another method with KeyGenerator
	// Gonna try it with EncryptTry3 method.
	// But this time, instead of randomly generate password,
	// it will use password generated by user
	public static byte[] encryptVolume(byte[] txt, SecretKey key, IvParameterSpec iv)
					throws NoSuchAlgorithmException, NoSuchPaddingException,
					InvalidKeyException, BadPaddingException, IllegalBlockSizeException,
					InvalidAlgorithmParameterException {

		// Tested: this algorithm will give the same length of plaintext and ciphertext.
		Cipher c = Cipher.getInstance("AES/CTR/PKCS5Padding");
		c.init(Cipher.ENCRYPT_MODE, key, iv);
		// return value
		return c.doFinal(txt);
	}

	public static byte[] decryptVolume(byte[] txt, SecretKey key, IvParameterSpec iv)
					throws NoSuchAlgorithmException, NoSuchPaddingException,
						InvalidKeyException, BadPaddingException, IllegalBlockSizeException,
						InvalidAlgorithmParameterException {

			// Tested: this algorithm will give the same length of plaintext and ciphertext.
			Cipher c = Cipher.getInstance("AES/CTR/PKCS5Padding");
			c.init(Cipher.DECRYPT_MODE, key, iv);
			// return value
			return c.doFinal(txt);


	}

	// This is used for generating SecretKey based on password entered and salt
	static SecretKey passwordHash(char[] password, byte[] salt)
					throws NoSuchAlgorithmException, InvalidKeySpecException {

		SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
		KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);
		SecretKey tmp = factory.generateSecret(spec);

		return new SecretKeySpec(tmp.getEncoded(), "AES");

	}

	// Save salt to file
	public static void saveSalt(byte[] b) throws IOException {
		FileUtils.writeByteArrayToFile(new File(SALTFILE), b);
	}

	// Load salt from file
	public static byte[] loadSalt() throws IOException {
		File file = new File(SALTFILE);
		return FileUtils.readFileToByteArray(file);
	}




} // end class SymmetricCryptography
